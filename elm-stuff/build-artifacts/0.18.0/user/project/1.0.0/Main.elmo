var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$randomSequence = F4(
	function (numberOfValues, min, max, seed) {
		var randomSeed = _elm_lang$core$Random$initialSeed(seed);
		var generator = A2(
			_elm_lang$core$Random$list,
			numberOfValues,
			A2(_elm_lang$core$Random$int, min, max));
		var _p0 = A2(_elm_lang$core$Random$step, generator, randomSeed);
		var result = _p0._0;
		var nextSeed = _p0._1;
		return result;
	});
var _user$project$Main$createRandomNumberGeneratorList = F2(
	function (emptyCells, countOfGenerators) {
		return A2(
			_elm_lang$core$List$filterMap,
			function (index) {
				if (_elm_lang$core$Native_Utils.cmp(index, countOfGenerators) < 1) {
					var _p1 = A2(_elm_lang$core$Debug$log, 'test', emptyCells - (index - 1));
					return _elm_lang$core$Maybe$Just(
						A2(_elm_lang$core$Random$int, 1, emptyCells - (index - 1)));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			A2(
				_elm_lang$core$Debug$log,
				'list',
				A2(_elm_lang$core$List$range, 1, emptyCells)));
	});
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {gameState: a, gridContents: b, level: c, randomSequence: d, score: e, startedTime: f};
	});
var _user$project$Main$Results = {ctor: 'Results'};
var _user$project$Main$Playing = {ctor: 'Playing'};
var _user$project$Main$Welcome = {ctor: 'Welcome'};
var _user$project$Main$initialModel = {
	gameState: _user$project$Main$Welcome,
	gridContents: _elm_lang$core$Dict$empty,
	level: _elm_lang$core$Maybe$Nothing,
	randomSequence: {ctor: '[]'},
	score: 0,
	startedTime: _elm_lang$core$Maybe$Nothing
};
var _user$project$Main$Level3 = {ctor: 'Level3'};
var _user$project$Main$Level2 = {ctor: 'Level2'};
var _user$project$Main$Level1 = {ctor: 'Level1'};
var _user$project$Main$scoreToLevel = function (score) {
	return (_elm_lang$core$Native_Utils.cmp(score, 350) < 0) ? _user$project$Main$Level1 : (((_elm_lang$core$Native_Utils.cmp(score, 350) > -1) && (_elm_lang$core$Native_Utils.cmp(score, 1000) < 0)) ? _user$project$Main$Level2 : _user$project$Main$Level3);
};
var _user$project$Main$Client = {ctor: 'Client'};
var _user$project$Main$Fraudster = {ctor: 'Fraudster'};
var _user$project$Main$Empty = {ctor: 'Empty'};
var _user$project$Main$StartedTime = function (a) {
	return {ctor: 'StartedTime', _0: a};
};
var _user$project$Main$getTime = A2(_elm_lang$core$Task$perform, _user$project$Main$StartedTime, _elm_lang$core$Time$now);
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _user$project$Main$getTime};
var _user$project$Main$StartGame = {ctor: 'StartGame'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$InitialiseLevel = {ctor: 'InitialiseLevel'};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'ClickBox':
				var _p3 = A2(
					_elm_lang$core$Debug$log,
					'clicked',
					A2(_elm_lang$core$Dict$get, _p2._0, model.gridContents));
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'CreateClients':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'CreateFraudsters':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'InitialiseLevel':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'StartGame':
				var _p4 = A2(
					_user$project$Main$update,
					_user$project$Main$InitialiseLevel,
					_elm_lang$core$Native_Utils.update(
						model,
						{
							gameState: _user$project$Main$Playing,
							level: _elm_lang$core$Maybe$Just(_user$project$Main$Level1)
						}));
				var updatedModel = _p4._0;
				var updatedCmd = _p4._1;
				var _p5 = function () {
					var _p6 = updatedModel.level;
					if (_p6.ctor === 'Just') {
						switch (_p6._0.ctor) {
							case 'Level1':
								return {ctor: '_Tuple3', _0: 2, _1: 1, _2: 3};
							case 'Level2':
								return {ctor: '_Tuple3', _0: 4, _1: 2, _2: 5};
							default:
								return {ctor: '_Tuple3', _0: 6, _1: 3, _2: 7};
						}
					} else {
						return {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0};
					}
				}();
				var numberOfClients = _p5._0;
				var numberOfFraudsters = _p5._1;
				var rows = _p5._2;
				var emptySpaces = _elm_lang$core$Dict$isEmpty(model.gridContents) ? ((rows * rows) - 1) : _elm_lang$core$List$length(
					A2(
						_elm_lang$core$List$filter,
						function (index) {
							return _elm_lang$core$Native_Utils.eq(index, _user$project$Main$Empty);
						},
						_elm_lang$core$Dict$values(model.gridContents)));
				var generators = A2(
					_elm_lang$core$Debug$log,
					'generators',
					A2(_user$project$Main$createRandomNumberGeneratorList, emptySpaces, numberOfClients + numberOfFraudsters));
				var clientRandomList = function () {
					var _p7 = updatedModel.startedTime;
					if (_p7.ctor === 'Just') {
						return A4(
							_user$project$Main$randomSequence,
							numberOfClients,
							1,
							rows * rows,
							_elm_lang$core$Basics$floor(_p7._0));
					} else {
						return {ctor: '[]'};
					}
				}();
				var fraudsterRandomList = function () {
					var _p8 = updatedModel.startedTime;
					if (_p8.ctor === 'Just') {
						return A4(
							_user$project$Main$randomSequence,
							numberOfFraudsters,
							1,
							rows * rows,
							_elm_lang$core$Basics$floor(_p8._0 / 2));
					} else {
						return {ctor: '[]'};
					}
				}();
				var gridContents = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (index) {
							var cellType = A2(_elm_lang$core$List$member, index, clientRandomList) ? _user$project$Main$Client : (A2(_elm_lang$core$List$member, index, fraudsterRandomList) ? _user$project$Main$Fraudster : _user$project$Main$Empty);
							return {ctor: '_Tuple2', _0: index, _1: cellType};
						},
						A2(
							_elm_lang$core$List$filter,
							function (index) {
								var floatRows = _elm_lang$core$Basics$toFloat(rows);
								return !_elm_lang$core$Native_Utils.eq(
									_elm_lang$core$Basics$toFloat(index),
									((floatRows * floatRows) + 1) / 2);
							},
							A2(_elm_lang$core$List$range, 1, rows * rows))));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						updatedModel,
						{gridContents: gridContents}),
					_1: updatedCmd
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							startedTime: _elm_lang$core$Maybe$Just(_p2._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$CreateFraudsters = {ctor: 'CreateFraudsters'};
var _user$project$Main$CreateClients = {ctor: 'CreateClients'};
var _user$project$Main$ClickBox = function (a) {
	return {ctor: 'ClickBox', _0: a};
};
var _user$project$Main$makeGrid = F2(
	function (rows, gridContents) {
		return A2(
			_elm_lang$core$List$map,
			function (index) {
				var contentClass = function () {
					var _p9 = A2(_elm_lang$core$Dict$get, index, gridContents);
					_v4_2:
					do {
						if (_p9.ctor === 'Just') {
							switch (_p9._0.ctor) {
								case 'Client':
									return {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('client'),
										_1: {ctor: '[]'}
									};
								case 'Fraudster':
									return {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fraudster'),
										_1: {ctor: '[]'}
									};
								default:
									break _v4_2;
							}
						} else {
							break _v4_2;
						}
					} while(false);
					return {ctor: '[]'};
				}();
				var floatRows = _elm_lang$core$Basics$toFloat(rows);
				var logoItem = _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$toFloat(index),
					((floatRows * floatRows) + 1) / 2) ? {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('grid-logo'),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
				return A2(
					_elm_lang$html$Html$div,
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('grid-item'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'grid-item-',
										_elm_lang$core$Basics$toString(index))),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								logoItem,
								A2(
									_elm_lang$core$Basics_ops['++'],
									contentClass,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$ClickBox(index)),
										_1: {ctor: '[]'}
									})))),
					{ctor: '[]'});
			},
			A2(_elm_lang$core$List$range, 1, rows * rows));
	});
var _user$project$Main$view = function (model) {
	var _p10 = function () {
		var _p11 = model.level;
		if (_p11.ctor === 'Just') {
			switch (_p11._0.ctor) {
				case 'Level1':
					return {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('grid-container--level1'),
							_1: {ctor: '[]'}
						},
						_1: A2(_user$project$Main$makeGrid, 3, model.gridContents)
					};
				case 'Level2':
					return {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('grid-container--level2'),
							_1: {ctor: '[]'}
						},
						_1: A2(_user$project$Main$makeGrid, 5, model.gridContents)
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('grid-container--level3'),
							_1: {ctor: '[]'}
						},
						_1: A2(_user$project$Main$makeGrid, 7, model.gridContents)
					};
			}
		} else {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			};
		}
	}();
	var levelClass = _p10._0;
	var grid = _p10._1;
	var _p12 = model.gameState;
	switch (_p12.ctor) {
		case 'Welcome':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('welcome-container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Welcome to Whack-a-Fraudster'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$StartGame),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Start'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		case 'Playing':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('grid-container'),
								_1: {ctor: '[]'}
							},
							levelClass),
						grid),
					_1: {ctor: '[]'}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model.score)),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
